Working with files in Python involves using built-in functions to interact with the file system. The primary function for file operations is open(), which returns a file object that can then be used to perform various actions like reading, writing, or appending data.
1. Opening Files:
The open() function takes two main arguments: the filename (including the path if not in the same directory) and the mode. Common modes include:
'r' (read): Opens for reading. This is the default mode.
'w' (write): Opens for writing. If the file exists, its content is truncated (emptied). If it doesn't exist, a new file is created.
'a' (append): Opens for writing, adding new content to the end of the file. If the file doesn't exist, a new one is created.
'x' (create): Creates a new file. Returns an error if the file already exists.
'b' (binary): Used with other modes (e.g., 'rb', 'wb') for binary files like images or audio.
'+' (update): Used with other modes (e.g., 'r+', 'w+') to allow both reading and writing.
Example:
Python

# Open a file for reading
file_read = open("example.txt", "r")

# Open a file for writing
file_write = open("new_file.txt", "w")
2. Reading Files:
Once a file is opened in a read-compatible mode, its content can be accessed using methods like:
read(): Reads the entire content of the file as a single string.
readline(): Reads a single line from the file.
readlines(): Reads all lines from the file and returns them as a list of strings.
Example:
Python

file_read = open("example.txt", "r")
content = file_read.read()
print(content)
file_read.close()
3. Writing to Files:
When a file is opened in a write-compatible mode ('w', 'a'), data can be added using the write() method.
Example:
Python

file_write = open("new_file.txt", "w")
file_write.write("This is a new line of text.\n")
file_write.close()
4. Closing Files:
It is crucial to close files after operations to release system resources and ensure data integrity. This is done using the close() method.
Example:
Python

my_file = open("data.txt", "r")
# ... operations ...
my_file.close()
5. The with Statement (Recommended):
The with statement provides a more robust and Pythonic way to handle files, ensuring they are automatically closed even if errors occur.
Example:
Python

with open("example.txt", "r") as file_object:
    content = file_object.read()
    print(content)
# File is automatically closed here